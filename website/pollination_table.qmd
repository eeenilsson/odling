---
title: "Pollinationsschema"
execute:
  echo: false
---

Schemat tar hänsyn till genetisk kompatibilitet och närhet i blomningstid. Motsvarande information finns också i sökbara tabeller längre ner.

::: {.column-screen}
![](../../../dropbox/images/plants/plot_pollination_table.png)
:::

# Instruktioner

För att kunna befruktas behöver sötkörsbär pollineras av ett körsbär av **annan sort** som 1) blommar samtidigt och 2) är genetiskt kompatibel. Undantaget är de _självfertila_ sorterna, vilka kan befrukta sig själva. Kvaliteten och storleken på skörden blir dock bättre om de pollineras av andra.

Hur den genetiska kompatibiliteten fungerar förklaras på sidan [om pollination](pollination_about.qmd).

Blomningstiden varierar från år till år beroende på väderlek och klimat, men man brukar dela in den relativa blomningstiden för olika körsbärssorter i fem grupper från tidig till sen. Uppgifter om blomningstid varierar beroende på källa och för många sorter saknas information från svenska förhållanden. Blomningstiden i schemat ovan är en sammanvägning av den relativa blomningstiden från olika svenska och internationella källor. Du kan läsa mer om blomning på sidan [om blomning](blooming.qmd).

Då det finns en osäkerhet i uppgifterna om blomningstid bör du även kontrollera med din lokala plantskola vilka sorter som brukar fungera tillsammans. Uppgifterna om genetisk kompatibilitet är mer säkra och icke-kompatibla sorter bör undvikas.

## Hur schemat avläses

Välj den sort du är intresserad av och leta upp namnet under "mottagare" (till vänster i schemat). Följ raden tills du kommer till grönfärgade cirklar. Cirkelns färg motsvarar närhet i blomningstid och cirkelns storlek motsvarar den genetiska kompatibiliteten med "pollinatören" vars namn avläses nedtill i schemat. En **grön** cirkel betyder att pollinatören blommar ungefär samtidigt (och är genetiskt kompatibel). En **röd** cirkel betyder att det föreligger genetisk kompatibilitet men att blomningstiden är olika. Saknas genetisk kompatibilitet finns ingen cirkel alls, bara en liten röd prick. En svart ring runt cirkeln betyder att sorten angetts som pollinatör på någon svensk hemsida (Sveriges trädgårdsmästare, Plantagen, Wexthuset, Rangedala, eller Splendor).

Det finns skillnader mellan källor i vilka pollinatörer som anges för en viss sort och en del felaktigheter tycks finnas. Tex anges 'Fryksås' och 'Gårdebo' vara självfertila enligt Sveriges trädgårdsmästare, och Plantagen anger att 'Regina' kan pollineras av 'Van', men detta stämmer ej med genetiska data. Vissa sorter som inte tycks blomma samtidigt enlig sammanvägning av data anges kunna pollinera varandra.

**Cirkelns färg:**

- _Mörkgrön_: Blommar under samma period.
- _Ljusgrön_: Blommar under en närliggande period.
- _Röd_: Blommar **ej** under samma- eller närliggande period.
- _Vit_: Uppgifter om relativ blomningstid saknas.

**Cirkelns storlek:**

- _Större_: Fullt kompatibel (alla pollinatörens pollenkorn har förmågan att befrukta mottagaren).
- _Mindre_: Delvis kompatibel (hälften av pollinatörens pollenkorn har förmågan att befrukta mottagaren).
- _Ingen (röd prick)_: Icke-kompatibel (inga av pollinatörens pollenkorn har förmågan att befrukta mottagaren).

Självfertila sorter är markerade med en asterisk (*) efter namnet. De självfertila sorterna är också "universella pollinatörer", dvs de kan befrukta sig själva och alla andra sorter (förutsatt att de blommar samtidigt).

Sorterna är ordnade efter blomningstid från vänster (tidigast) till höger (senast) och nedifrån (tidigast) och upp (senast), undantaget sorter för vilka uppgift om blomningstid saknas (de ligger längst ut i schemat).

Vilket datum de olika blomningstiderna infaller varierar beroende på klimat och väder. I den norska Ullensvang varierar tex starten av blomningen för _Prunus avium_ 'Van' mellan 30 april och 19 maj (vanligen kring 8 maj) beroende på år.

<!-- # Pollinationstabell -->
<!-- Olika flikar med korstabell. -->

<!-- Om det blir för många kan det delas upp såhär: -->

<!-- ## Flik 1 Vanliga sorter -->

<!-- Vanligt förekommande i handeln. -->

<!-- ## Flik 2 Ovanliga sorter -->

<!-- Svåra att få tag på. -->

<!-- ## Flik 3 Alla sorter (tabell istället för figur?) -->

<!-- Alla sorter. -->


## Pollinationstabell

Varje flik visar sorter som blommar i samma **eller föregående** blomningsgrupp som den i flikens namn. Dvs i fliken "medeltidig" visas även de som är i gruppen "tidig", i fliken "medel" visas även de i gruppen "medeltidig" (igen, men utan de i gruppen "tidig") osv.

Tabellen kan filtreras genom att skriva sökord i rutan under kolumnernas rubriker. Vill du söka efter flera saker samtidigt använd "|" mellan sökorden. Tex ger "van|swe" i kolumnen "Sort" träffar på 'Van' och 'Sweetheart'.

Genetisk kompatibilitet är visat med en stor bokstav. "A" betyder helt komatibel, "B" betyder delvis kompatibel och "0" betyder **icke-**kompatibel.

Närhet i blomningstid visas med "+" eller "-". Ett "+" betyder att pollinatören ligger en blomningsgrupp bort. Två "++" att de är i samma blomningsgrupp.

::: {.column-screen}

::: {.panel-tabset}

## Medeltidig (och tidig)

```{r} 
#| label: tbl-medeltidig
#| tbl-cap: "Tabell mätvärden"
#| warning: false

sanitize_label <- function(x){
x <- gsub(" \\([^$]*", "", x)
x <- gsub(" \\\n[^$]*", "", x)
x <- gsub(" \\/[^$]*", "", x)
x <- gsub("TM$", "", x)
x <- gsub("Späte Rote Knorpelkirsche", "Rote", x)
x <- gsub("Knauffs Schwarze", "Knauffs", x)
x <- gsub("Große Schwarze Knorpel", "Große Schwarze", x)
x <- gsub("Dönissens Gelbe Knorpel", "Dönissens Gelbe", x)
x <- gsub("Guigne d'Annonay", "Annonay", x)
x <- gsub("Schneiders Späte Knorpelkirsche", "Schneiders Späte", x)

return(x)
}

## read data
varnames3 <- readRDS("../varnames3.rds")
## bt_wide_curated <- read.csv("../bt_wide_curated.csv")
bg12 <- read.csv("../bg12.csv")
bg23 <- read.csv("../bg23.csv")
bg34 <- read.csv("../bg34.csv")
bg45 <- read.csv("../bg45.csv")

query_label <- function(x, y){
    nomatch <- x[!x %in% names(y)]
    names(nomatch) <- nomatch
    y <- c(y, nomatch)
    return(y[match(x, names(y))])
}

library("reactable")

reactable(bg12,
          filterable = TRUE,
          searchable = TRUE,
          bordered = TRUE,
          highlight = TRUE,
          striped = FALSE,
##          searchMethod = JS(), ## See https://glin.github.io/reactable/articles/custom-filtering.html#basic-custom-search-method
          defaultColDef = colDef(
              header = function(value) unname(query_label(value, varnames3)),
              ## cell = function(value) format(value, nsmall = 1),
              align = "center",
              minWidth = 30,
              ## headerStyle = list(background = "#f7f7f8"),
              filterable = TRUE,
      # filtering for multiple values using regex partial match
filterMethod = JS("function(rows, columnId, filterValue) {
        const pattern = new RegExp(filterValue, 'i')
        
        return rows.filter(function(row) {
          return pattern.test(row.values[columnId])
        })
      }")
          ),
          columns = list(
              label = colDef( ## note: use original colname "label"
                  sticky = "left",
                  align = "left",
                  minWidth = 100,
                  ## Add a right border style
                  style = list(borderRight = "1px solid #eee"),
                  headerStyle = list(borderRight = "1px solid #eee")
              )
          )
          )

## ?colFormat()
## Note: "details": Additional content to display when expanding a row. An R
          ## function that takes the row index and column name as
          ## arguments, or a ‘JS()’ function that takes a row info object
          ## and table state object as arguments. Cannot be used on a
          ## ‘groupBy’ column.

## ?colDef()
## ?JS

## Filterfunktioner i reactable: https://github.com/glin/reactable/issues/318
## Guide: https://glin.github.io/reactable/articles/custom-filtering.html

``` 

## Medel (och medeltidig)

```{r } 
#| label: tbl-medel
#| tbl-cap: "Medel"
#| warning: false

reactable(bg23,
          filterable = TRUE,
          searchable = TRUE,
          bordered = TRUE,
          highlight = TRUE,
          striped = FALSE,
          defaultColDef = colDef(
              header = function(value) unname(query_label(value, varnames3)),
              align = "center",
              minWidth = 30,
              filterable = TRUE,
              filterMethod = JS("function(rows, columnId, filterValue) {
        const pattern = new RegExp(filterValue, 'i')
        
        return rows.filter(function(row) {
          return pattern.test(row.values[columnId])
        })
      }")
          ),
          columns = list(
              label = colDef(
                  sticky = "left",
                  align = "left",
                  minWidth = 100,
                  style = list(borderRight = "1px solid #eee"),
                  headerStyle = list(borderRight = "1px solid #eee")
              )
          )
          )


``` 

## Medelsen (och medel)

```{r } 
#| label: tbl-medelsen
#| tbl-cap: "Medelsen"
#| warning: false

reactable(bg34,
          filterable = TRUE,
          searchable = TRUE,
          bordered = TRUE,
          highlight = TRUE,
          striped = FALSE,
          defaultColDef = colDef(
              header = function(value) unname(query_label(value, varnames3)),
              align = "center",
              minWidth = 30,
              filterable = TRUE,
              filterMethod = JS("function(rows, columnId, filterValue) {
        const pattern = new RegExp(filterValue, 'i')
        
        return rows.filter(function(row) {
          return pattern.test(row.values[columnId])
        })
      }")
          ),
          columns = list(
              label = colDef(
                  sticky = "left",
                  align = "left",
                  minWidth = 100,
                  style = list(borderRight = "1px solid #eee"),
                  headerStyle = list(borderRight = "1px solid #eee")
              )
          )
          )


``` 

## Sen (och medelsen)

```{r } 
#| label: tbl-sen
#| tbl-cap: "Sen"
#| warning: false

reactable(bg45,
          filterable = TRUE,
          searchable = TRUE,
          bordered = TRUE,
          highlight = TRUE,
          striped = FALSE,
          defaultColDef = colDef(
              header = function(value) unname(query_label(value, varnames3)),
              align = "center",
              minWidth = 30,
              filterable = TRUE,
              filterMethod = JS("function(rows, columnId, filterValue) {
        const pattern = new RegExp(filterValue, 'i')
        
        return rows.filter(function(row) {
          return pattern.test(row.values[columnId])
        })
      }")
          ),
          columns = list(
              label = colDef(
                  sticky = "left",
                  align = "left",
                  minWidth = 100,
                  style = list(borderRight = "1px solid #eee"),
                  headerStyle = list(borderRight = "1px solid #eee")
              )
          )
          )


``` 

 

:::

:::
